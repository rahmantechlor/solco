($=>{window.TokenicoProviders||(window.TokenicoProviders={}),($=>{$(document).ready(()=>{function countdown(el){var timer,days,hours,minutes,seconds,date=el.attr("data-date");date=(date=new Date(date)).getTime(),isNaN(date)||(timer=setInterval(function(){var dateNow=new Date,dateNow=new Date(dateNow.getUTCFullYear(),dateNow.getUTCMonth(),dateNow.getUTCDate(),dateNow.getUTCHours(),dateNow.getUTCMinutes(),dateNow.getUTCSeconds()),dateNow=parseInt((date-dateNow.getTime())/1e3);0<=dateNow&&(days=parseInt(dateNow/86400),dateNow%=86400,hours=parseInt(dateNow/3600),dateNow%=3600,minutes=parseInt(dateNow/60),dateNow%=60,seconds=parseInt(dateNow),0==days&&0==hours&&0==minutes&&0==seconds?(clearInterval(timer),infoPopup(Tokenico.lang.presaleStatusChanged).then(()=>{var div;(div=document.createElement("div")).className+="overlay",div.style.backgroundColor="#EFEFEF",div.style.position="fixed",div.style.width="100%",div.style.height="100%",div.style.zIndex="999999999999999",div.style.top="0px",div.style.left="0px",div.style.opacity=".5",document.body.appendChild(div),window.location.reload()})):(el.find(".days").html(parseInt(days,10)+" D"),el.find(".hours").html(("0"+hours).slice(-2)+" H"),el.find(".minutes").html(("0"+minutes).slice(-2)+" M"),el.find(".seconds").html(("0"+seconds).slice(-2)+" S")))},1e3))}Tokenico.countdown=countdown,$(".start-countdown, .end-countdown").each(function(index,item){countdown($(item))})})})(jQuery);{const evm={errorCatch:error=>{if(console.log(error),"object"==typeof error){if(error.message.includes("No relevant sale found!"))return errorPopup(Tokenico.lang.noFoundAnySale);if(error.message.includes("No relevant presale found!"))return errorPopup(Tokenico.lang.noFoundAnyPresale);if(error.message.includes("presale has not started"))return errorPopup(Tokenico.lang.presaleNotStarted);if(error.message.includes("been disabled because the presale is over"))return errorPopup(Tokenico.lang.presaleEnded);if(error.message.includes("the total sales limit has been reached"))return errorPopup(Tokenico.lang.presaleEnded2);if(error.message.includes("You are exceeding your remaining participation limit!"))return errorPopup(Tokenico.lang.exceedingRemainingLimit);if(error.message.includes("have reached the maximum"))return errorPopup(Tokenico.lang.yourRemainingLimitDone);if(error.message.includes("exceeding your remaining participation"))return errorPopup(Tokenico.lang.yourRemainingLimitExceeding);if(error.message.includes("exceeding the maximum purchase limit"))return errorPopup(Tokenico.lang.maxContributionExceeding);if(error.message.includes("exceeding the minimum purchase limit"))return errorPopup(Tokenico.lang.minContributionExceeding);if(error.message.includes("You did not send any funds"))return errorPopup(Tokenico.lang.youDidNotSendAnyFund);if(error.message.includes("You did not send any funds"))return errorPopup(Tokenico.lang.youDidNotSendAnyFund);if(error.message.includes("disabled because instant transfer"))return errorPopup(Tokenico.lang.disabledInstantTransfer);if(error.message.includes("not active because the presale is not over"))return errorPopup(Tokenico.lang.presaleNotEnded);if(error.message.includes("purchased any tokens"))return errorPopup(Tokenico.lang.youDidNotBuyToken);if(error.message.includes("have already been sent"))return errorPopup(Tokenico.lang.yourTokensAlreadySent);if(error.message.includes("executing this transaction exceeds the balance of the account"))return errorPopup(Tokenico.lang.insufficientBalance);if(error.message.includes('returned no data ("0x")'))return errorPopup(Tokenico.lang.presaleJustStarted);if(error.message.includes("transfer amount exceeds balance"))return errorPopup(Tokenico.lang.insufficientLiquidity);if(error.message.includes("ContractFunctionExecutionError: Missing or invalid parameters"))return errorPopup(Tokenico.lang.insufficientBalance)}else{if("request-rejected"==error)return infoPopup(Tokenico.lang.requestRejected);if("purchase-failed"==error)return errorPopup(Tokenico.lang.purchaseFailed)}errorPopup(Tokenico.lang.unexpectedError)},initialize:network=>(evm.provider=new EvmChains({network:network,wcProjectId:Tokenico.wcProjectId}),evm.decimals=network.nativeCurrency.decimals,evm.web3modal=evm.provider.getSupportedWallets(["web3modal"]).web3modal,evm),getConnectedAddress:()=>evm.web3modal.connectedAccount,getReceiverAddressUrl:presaleKey=>{var presaleKey=findPresaleByKey(presaleKey),connectedAddress=evm.getConnectedAddress();let explorerUrl=presaleKey.network.explorerUrl;return(explorerUrl=explorerUrl.replace(/\/(?!.*\/)/,""))+"/address/"+connectedAddress},getSale:presaleKey=>{let presale=findPresaleByKey(presaleKey);return new Promise(async resolve=>{try{var sale=await evm.web3modal.readContract(presale.contract.address,"getSale",presale.contract.abi,[presaleKey,evm.web3modal.connectedAccount]),totalPurchase=EvmChains.utils.toDec(sale.totalPurchase,evm.decimals);resolve({totalPurchase:totalPurchase,tokenToBeSent:totalPurchase*presale.exchangeRate,sentStatus:sale.sentStatus})}catch(error){resolve(null)}})},getSaleSentStatus:async presaleKey=>{let presale=findPresaleByKey(presaleKey);return new Promise(async(resolve,reject)=>{try{resolve(await evm.web3modal.readContract(presale.contract.address,"getSaleSentStatus",presale.contract.abi,[presaleKey,evm.web3modal.connectedAccount]))}catch(error){evm.errorCatch(error),reject(error)}})},getPresale:async presaleKey=>{let presale=findPresaleByKey(presaleKey);return new Promise(async(resolve,reject)=>{try{resolve(await evm.web3modal.readContract(presale.contract.address,"getPresale",presale.contract.abi,[presaleKey]))}catch(error){evm.errorCatch(error),reject(error)}})},getPresaleStatus:presale=>new Promise(async(resolve,reject)=>{try{resolve(await evm.web3modal.readContract(presale.contract.address,"getPresaleStatus",presale.contract.abi,[presale.key]))}catch(error){evm.errorCatch(error),reject(error)}}),getTotalSales:presaleKey=>{let presale=findPresaleByKey(presaleKey);return new Promise(async(resolve,reject)=>{try{var totalSales=await evm.web3modal.readContract(presale.contract.address,"getTotalSales",presale.contract.abi,[presaleKey]);resolve(EvmChains.utils.toDec(totalSales,evm.decimals))}catch(error){evm.errorCatch(error),reject(error)}})},getRemainingLimit:presaleKey=>{let presale=findPresaleByKey(presaleKey);return new Promise(async(resolve,reject)=>{try{var remainingLimit=await evm.web3modal.readContract(presale.contract.address,"getRemainingLimit",presale.contract.abi,[presaleKey]);resolve(EvmChains.utils.toDec(remainingLimit,evm.decimals))}catch(error){evm.errorCatch(error),reject(error)}})},claimProcess:presaleKey=>{let presale=findPresaleByKey(presaleKey);return new Promise(async(resolve,reject)=>{try{resolve(await evm.web3modal.writeContract({args:[presaleKey],functionName:"claim",abi:presale.contract.abi,address:presale.contract.address}))}catch(error){EvmChains.utils.rejectMessage(error,reject)}})},buyProcess:(presaleKey,amount)=>{let presale=findPresaleByKey(presaleKey);return new Promise(async(resolve,reject)=>{try{resolve(await evm.web3modal.writeContract({args:[presaleKey],functionName:"buy",abi:presale.contract.abi,value:EvmChains.utils.toHex(amount,18),address:presale.contract.address}))}catch(error){EvmChains.utils.rejectMessage(error,reject)}})},buy:(presaleKey,amount,callback)=>new Promise(async resolve=>{await evm.web3modal.removeOldConnection(),waitingPopup(Tokenico.lang.waitingConnection),evm.web3modal.connect().then(async()=>{var presale=await evm.getPresale(presaleKey);if(String(presale.receiverAddress).toLowerCase()==String(evm.getConnectedAddress()).toLowerCase())return errorPopup(Tokenico.lang.youAreTheReceiver);if(await evm.provider.Token(presale.tokenAddress).getBalance(presale.receiverAddress)<calculateAmount(amount,"*",presaleKey))return errorPopup(Tokenico.lang.insufficientLiquidity);var presale=await evm.getSale(presaleKey),presaleX=findPresaleByKey(presaleKey);if(presale){presale=parseFloat((presaleX.maxContribution-presale.totalPurchase).toFixed(10));if(presale<amount){let msg=Tokenico.lang.yourRemainingLimitExceeding2;return errorPopup(msg=msg.replace("{limit}",presale+" "+presaleX.network.nativeCurrency.symbol))}}waitingPopup(Tokenico.lang.confirmPurchaseProcess),evm.buyProcess(presaleKey,amount).then(async transactionHash=>{transactionHash=evm.provider.Transaction(transactionHash);callback({transactionHash:transactionHash.hash,transactionUrl:transactionHash.getUrl(),receiverAddress:evm.getConnectedAddress(),receiverAddressUrl:evm.getReceiverAddressUrl(presaleKey)}),waitingPopup(Tokenico.lang.purchaseProcess,`${Tokenico.lang.transactionId} <a href="${transactionHash.getUrl()}" target="_blank">${transactionHash.hash}</a>`),transactionHash.validate(5).then(()=>{resolve(!0)}).catch(error=>{console.error(error),evm.errorCatch("purchase-failed")})}).catch(error=>{console.error(error),evm.errorCatch(error)})}).catch(error=>{console.log(error),closePopup()})}),claim:presaleKey=>new Promise(async resolve=>{await evm.web3modal.removeOldConnection(),waitingPopup(Tokenico.lang.waitingConnection),evm.web3modal.connect().then(async()=>{var tokenSymbol=findPresaleByKey(presaleKey).token.symbol;let claimConfirmMsg=Tokenico.lang.claimConfirm;var sale=await evm.getSale(presaleKey);return sale?sale.sentStatus?errorPopup(Tokenico.lang.yourTokensAlreadySent):(sale=calculateAmount(sale.totalPurchase,"*",presaleKey),claimConfirmMsg=claimConfirmMsg.replace("{token}",sale+" "+tokenSymbol),void((await Swal.fire({title:claimConfirmMsg,icon:"info",showCancelButton:!0,confirmButtonText:Tokenico.lang.confirm,cancelButtonText:Tokenico.lang.cancel})).isConfirmed&&(waitingPopup(Tokenico.lang.confirmClaimProcess),evm.claimProcess(presaleKey).then(transactionHash=>{transactionHash=evm.provider.Transaction(transactionHash);waitingPopup(Tokenico.lang.claimProcess,`${Tokenico.lang.transactionId} <a href="${transactionHash.getUrl()}" target="_blank">${transactionHash.hash}</a>`),transactionHash.validate(5).then(()=>{resolve(evm.getConnectedAddress())}).catch(error=>{console.error(error),evm.errorCatch(error)})}).catch(error=>{console.error(error),evm.errorCatch(error)})))):errorPopup(Tokenico.lang.youDidNotBuyToken)}).catch(error=>{closePopup()})})};window.TokenicoProviders.evm=evm}if((()=>{const tron={};tron.errorCatch=error=>{if(console.error(error),"object"!=typeof(error=(error=>{if("Cannot transfer TRX to the same account"==error)return"same-account";if("object"==typeof error){if("WalletSignTransactionError"==error.name||String(error.message).includes("Confirmation declined by user")||String(error.message).includes("User rejected the request.")||String(error.message).includes("The user rejected connection.")||String(error.message).includes("Modal is closed.")||String(error.message).includes("User canceled")||String(error.message).includes("User rejected"))return"request-rejected";if(String(error.message).includes("The wallet is not found."))return"wallet-not-found";if(String(error.message).includes("User disapproved requested chains"))return"not-accepted-chain";if(error.message.includes("The QR window is closed."))return"closed-walletconnect-modal";if("WalletConnectionError"==error.name)return"closed-walletconnect-modal"}else if("string"==typeof error&&error.includes("Confirmation declined by user"))return"request-rejected";return error})(error)))return"request-rejected"==error?infoPopup(Tokenico.lang.requestRejected):"token-balance-not-enough"==error?errorPopup(Tokenico.lang.saleBalanceError):"closed-walletconnect-modal"==error?closePopup():errorPopup(Tokenico.lang.invalidTokenAddress);errorPopup(Tokenico.lang.unexpectedError)},tron.initialize=(network,presaleKey)=>{presaleKey=findPresaleByKey(presaleKey);return tron.provider=new Tron({testnet:Boolean(network.testnet),wcProjectId:Tokenico.wcProjectId}),tron.decimals=network.nativeCurrency.decimals,tron.contract=tron.getContractInstance(presaleKey.contract.address,presaleKey.contract.abi),tron},tron.getContractInstance=(address,abi)=>(tron.provider.web3.setAddress(address),tron.provider.web3.contract(abi,address)),tron.getConnectedAddress=()=>tron.provider.connectedWallet.connectedAccount,tron.getReceiverAddressUrl=presaleKey=>{var presaleKey=findPresaleByKey(presaleKey),connectedAddress=tron.getConnectedAddress();let explorerUrl=presaleKey.network.explorerUrl;return(explorerUrl=explorerUrl.replace(/\/(?!.*\/)/,""))+"/address/"+connectedAddress},tron.getSale=presaleKey=>{let presale=findPresaleByKey(presaleKey);return new Promise(async resolve=>{try{var sale=await tron.contract.getSale(presaleKey,tron.getConnectedAddress()).call(),totalPurchase=Tron.utils.toDec(sale.totalPurchase,tron.decimals);resolve({totalPurchase:totalPurchase,tokenToBeSent:totalPurchase*presale.exchangeRate,sentStatus:sale.sentStatus})}catch(error){resolve(null)}})},tron.getSaleSentStatus=async presaleKey=>new Promise(async(resolve,reject)=>{try{resolve(await tron.contract.getSaleSentStatus(presaleKey,tron.getConnectedAddress()).call())}catch(error){tron.errorCatch(error),reject(error)}}),tron.getPresale=async presaleKey=>new Promise(async(resolve,reject)=>{try{resolve(await tron.contract.getPresale(presaleKey).call())}catch(error){tron.errorCatch(error),reject(error)}}),tron.getPresaleStatus=presale=>new Promise(async(resolve,reject)=>{try{resolve(await tron.contract.getPresaleStatus(presale.key).call())}catch(error){tron.errorCatch(error),reject(error)}}),tron.getTotalSales=presaleKey=>new Promise(async(resolve,reject)=>{try{var totalSales=await tron.contract.getTotalSales(presaleKey).call();resolve(Tron.utils.toDec(totalSales,tron.decimals))}catch(error){tron.errorCatch(error),reject(error)}}),tron.getRemainingLimit=presaleKey=>{findPresaleByKey(presaleKey);return new Promise(async(resolve,reject)=>{try{var remainingLimit=await tron.contract.getRemainingLimit(presaleKey).call();resolve(Tron.utils.toDec(remainingLimit,tron.decimals))}catch(error){tron.errorCatch(error),reject(error)}})},tron.initWallets=async()=>{closePopup(),Tokenico.setWallets(await tron.provider.getSupportedWallets(["tronlink","bitget","okx","tokenpocket","walletconnect"]))},tron.createTransaction=async(contractAddress,functions,options,parameters,from)=>tron.provider.web3.transactionBuilder.triggerSmartContract(contractAddress,functions,options,parameters,from),tron.claimProcess=presaleKey=>new Promise(async(resolve,reject)=>{try{var contractAddress=findPresaleByKey(presaleKey).contract.address,parameter=[{type:"string",value:presaleKey}],options={feeLimit:1e8},transaction=(await tron.createTransaction(contractAddress,"claim(string)",options,parameter,tron.getConnectedAddress()))["transaction"];resolve(await tron.provider.connectedWallet.sendTransaction(transaction))}catch(error){Tron.utils.rejectMessage(error,reject)}}),tron.buyProcess=(presaleKey,amount)=>new Promise(async(resolve,reject)=>{try{var contractAddress=findPresaleByKey(presaleKey).contract.address,parameter=[{type:"string",value:presaleKey}],options={feeLimit:1e8,callValue:tron.provider.web3.toSun(amount)},transaction=(await tron.createTransaction(contractAddress,"buy(string)",options,parameter,tron.getConnectedAddress()))["transaction"];resolve(await tron.provider.connectedWallet.sendTransaction(transaction))}catch(error){Tron.utils.rejectMessage(error,reject)}}),tron.buy=async(presaleKey,amount,callback)=>new Promise(async resolve=>{await tron.initWallets(),Tokenico.walletClicked=wallet=>{Tokenico.closeWalletModal(),waitingPopup(Tokenico.lang.waitingConnection),wallet.connect().then(async()=>{var presale=await tron.getPresale(presaleKey),receiverAddress=tron.provider.web3.address.fromHex(presale.receiverAddress);if(String(receiverAddress).toLowerCase()==String(tron.getConnectedAddress()).toLowerCase())return errorPopup(Tokenico.lang.youAreTheReceiver);if(await tron.provider.Token(presale.tokenAddress).getBalance(receiverAddress)<calculateAmount(amount,"*",presaleKey))return errorPopup(Tokenico.lang.insufficientLiquidity);presale=await tron.getSale(presaleKey),receiverAddress=findPresaleByKey(presaleKey);if(presale){presale=parseFloat((receiverAddress.maxContribution-presale.totalPurchase).toFixed(10));if(presale<amount){let msg=Tokenico.lang.yourRemainingLimitExceeding2;return errorPopup(msg=msg.replace("{limit}",presale+" "+receiverAddress.network.nativeCurrency.symbol))}}waitingPopup(Tokenico.lang.confirmPurchaseProcess),tron.buyProcess(presaleKey,amount).then(async transaction=>{callback({transactionHash:transaction.hash,transactionUrl:transaction.getUrl(),receiverAddress:tron.getConnectedAddress(),receiverAddressUrl:tron.getReceiverAddressUrl(presaleKey)}),waitingPopup(Tokenico.lang.purchaseProcess,`${Tokenico.lang.transactionId} <a href="${transaction.getUrl()}" target="_blank">${transaction.hash}</a>`),transaction.validate(5).then(()=>{resolve(!0)}).catch(error=>{console.error(error),tron.errorCatch("purchase-failed")})}).catch(error=>{console.error(error),tron.errorCatch(error)})}).catch(tron.errorCatch)}}),tron.claim=presaleKey=>new Promise(async resolve=>{await tron.initWallets(),Tokenico.walletClicked=wallet=>{Tokenico.closeWalletModal(),waitingPopup(Tokenico.lang.waitingConnection),wallet.connect().then(async()=>{var tokenSymbol=findPresaleByKey(presaleKey).token.symbol;let claimConfirmMsg=Tokenico.lang.claimConfirm;var sale=await tron.getSale(presaleKey);return sale?sale.sentStatus?errorPopup(Tokenico.lang.yourTokensAlreadySent):(sale=calculateAmount(sale.totalPurchase,"*",presaleKey),claimConfirmMsg=claimConfirmMsg.replace("{token}",sale+" "+tokenSymbol),void((await Swal.fire({title:claimConfirmMsg,icon:"info",showCancelButton:!0,confirmButtonText:Tokenico.lang.confirm,cancelButtonText:Tokenico.lang.cancel})).isConfirmed&&(waitingPopup(Tokenico.lang.confirmClaimProcess),tron.claimProcess(presaleKey).then(transaction=>{waitingPopup(Tokenico.lang.claimProcess,`${Tokenico.lang.transactionId} <a href="${transaction.getUrl()}" target="_blank">${transaction.hash}</a>`),transaction.validate(5).then(()=>{resolve(tron.getConnectedAddress())}).catch(error=>{console.error(error),tron.errorCatch(error)})}).catch(error=>{console.error(error),tron.errorCatch(error)})))):errorPopup(Tokenico.lang.youDidNotBuyToken)}).catch(tron.errorCatch)}}),window.TokenicoProviders.tron=tron})(),window.SolanaProvider){const solana={},{SolanaProvider,AnchorProgram}=window.SolanaProvider;solana.errorCatch=error=>{if(console.error(error),"object"==typeof(error=(error=>{if("object"==typeof error){if(error.message.includes("QR Code Modal Closed"))return"closed-walletconnect-modal";if("WalletSendTransactionError"==error.name&&(-1<String(error.message).indexOf("Unexpected error")||-1<String(error.message).indexOf("Transaction simulation failed: Blockhash not found")||-1<String(error.message).indexOf("Transaction results in an account (1) without insufficient funds for rent")))return error;if(["WalletConnectionError","WalletWindowClosedError","WalletAccountError","WalletSendTransactionError"].includes(error.name)||4001==error.code||"User rejected the request."==error.message||"WalletSignTransactionError"==error.name||-1<String(error.message).indexOf("user reject this request")||"User canceled request"==error.message)return"request-rejected";if("WalletTimeoutError"==error.name)return"timeout";if(error.message&&-1!==error.message.indexOf("403")||error.message&&-1!==error.message.indexOf("Access forbidden"))return"rpc-access-forbidden";if("WalletNotReadyError"==error.name)return"wallet-not-found";if("WalletSendTransactionError"==error.name&&("User rejected the request."!=error.message||"User canceled request"!=error.message)||"User disapproved requested chains"==error.message)return"not-accepted-chain"}return error})(error))){if(error.message.includes("Owner token account is not delegated"))return errorPopup(Tokenico.lang.notDelegated)}else{if("request-rejected"==error)return infoPopup(Tokenico.lang.requestRejected);if("purchase-failed"==error)return errorPopup(Tokenico.lang.purchaseFailed);if("closed-walletconnect-modal"==error)return closePopup()}errorPopup(Tokenico.lang.unexpectedError)},solana.getAdapter=()=>{if(solana.provider.connectedWallet)return solana.provider.connectedWallet.solWalletAdapter.wallet.value.adapter},solana.getProgram=()=>solana.program=new AnchorProgram(solana.programIdl,solana.programId,solana.provider.web3,solana.getAdapter()),solana.initialize=(network,presaleKey)=>{presaleKey=findPresaleByKey(presaleKey);return solana.programIdl=presaleKey.contract.abi,solana.programId=presaleKey.contract.address,solana.provider=new SolanaProvider({rpcUrl:network.rpcUrl,testnet:Boolean(network.testnet),wcProjectId:Tokenico.wcProjectId}),solana.decimals=9,solana.getProgram(),solana},solana.getPresaleStatus=async presale=>{try{var utcTime=Math.floor(Date.now()/1e3),data=await solana.program.getPresaleAccountData(presale.args.presaleAccount);return utcTime<data.startDate&&utcTime<data.endDate?"not-started":utcTime>data.endDate?"ended":"started"}catch(error){console.error(error)}},solana.getConnectedAddress=()=>solana.provider.connectedWallet.connectedAccount,solana.getReceiverAddressUrl=presaleKey=>{presaleKey=findPresaleByKey(presaleKey);let explorerUrl=presaleKey.network.explorerUrl;var connectedAddress=solana.getConnectedAddress();return explorerUrl=(explorerUrl=explorerUrl.replace(/\/(?!.*\/)/,""))+"/account/"+connectedAddress,presaleKey.network.testnet?explorerUrl+"?cluster=devnet":explorerUrl},solana.initWallets=async()=>{closePopup(),Tokenico.setWallets(await solana.provider.getSupportedWallets(["phantom","solflare","slope","coinbasewallet","bitget","walletconnect"]))},solana.buy=async(presaleKey,amount,callback)=>new Promise(async resolve=>{await solana.initWallets(),Tokenico.walletClicked=wallet=>{Tokenico.closeWalletModal(),waitingPopup(Tokenico.lang.waitingConnection),wallet.connect().then(async buyerAccount=>{var program=solana.getProgram(),presale=findPresaleByKey(presaleKey),tokenAddress=presale.token.address,tokenProgram=presale.token.program,presaleAccount=presale.args.presaleAccount;const connectedWallet=solana.provider.connectedWallet;var presaleData=await program.getPresaleAccountData(presaleAccount),purchaseData=await program.getPurchaseAccountDataByWallet(presaleKey,solana.getConnectedAddress()),neededBalance=amount+.003;if(await solana.provider.Coin().getBalance(buyerAccount)<neededBalance)return errorPopup(Tokenico.lang.insufficientBalance);if(String(presaleData.ownerAccount).toLowerCase()==String(solana.getConnectedAddress()).toLowerCase())return errorPopup(Tokenico.lang.youAreTheReceiver);if(await solana.provider.Token(tokenAddress).getBalance(presaleData.ownerAccount)<calculateAmount(amount,"*",presaleKey))return errorPopup(Tokenico.lang.insufficientLiquidity);if(purchaseData){buyerAccount=parseFloat((presale.maxContribution-purchaseData.amount).toFixed(10));if(buyerAccount<amount){let msg=Tokenico.lang.yourRemainingLimitExceeding2;return errorPopup(msg=msg.replace("{limit}",buyerAccount+" "+presale.network.nativeCurrency.symbol))}}waitingPopup(Tokenico.lang.confirmPurchaseProcess),program.createPurchaseTransaction(presaleKey,amount,{presaleAccount:presaleAccount,tokenAddress:tokenAddress,tokenProgram:tokenProgram}).then(async({transaction})=>{transaction=await connectedWallet.sendTransaction(transaction),transaction=solana.provider.Transaction(transaction);callback({transactionHash:transaction.hash,transactionUrl:transaction.getUrl(),receiverAddress:solana.getConnectedAddress(),receiverAddressUrl:solana.getReceiverAddressUrl(presaleKey)}),waitingPopup(Tokenico.lang.purchaseProcess,`${Tokenico.lang.transactionId} <a href="${transaction.getUrl()}" target="_blank">${transaction.hash}</a>`),transaction.validate().then(()=>{resolve(!0)}).catch(solana.errorCatch)}).catch(solana.errorCatch)}).catch(solana.errorCatch)}}),solana.claim=presaleKey=>new Promise(async resolve=>{await solana.initWallets(),Tokenico.walletClicked=wallet=>{Tokenico.closeWalletModal(),waitingPopup(Tokenico.lang.waitingConnection),wallet.connect().then(async()=>{var program=solana.getProgram(),presale=findPresaleByKey(presaleKey),tokenAddress=presale.token.address,tokenProgram=presale.token.program,presaleAccount=presale.args.presaleAccount;const connectedWallet=solana.provider.connectedWallet;var purchaseData=await program.getPurchaseAccountDataByWallet(presaleKey,solana.getConnectedAddress()),presale=presale.token.symbol;let claimConfirmMsg=Tokenico.lang.claimConfirm;return purchaseData?purchaseData.sent?errorPopup(Tokenico.lang.yourTokensAlreadySent):(purchaseData=calculateAmount(purchaseData.amount,"*",presaleKey),claimConfirmMsg=claimConfirmMsg.replace("{token}",purchaseData+" "+presale),void((await Swal.fire({title:claimConfirmMsg,icon:"info",showCancelButton:!0,confirmButtonText:Tokenico.lang.confirm,cancelButtonText:Tokenico.lang.cancel})).isConfirmed&&(waitingPopup(Tokenico.lang.confirmClaimProcess),program.createClaimTransaction(presaleKey,{presaleAccount:presaleAccount,tokenAddress:tokenAddress,tokenProgram:tokenProgram}).then(async({transaction})=>{transaction=await connectedWallet.sendTransaction(transaction),transaction=solana.provider.Transaction(transaction);waitingPopup(Tokenico.lang.claimProcess,`${Tokenico.lang.transactionId} <a href="${transaction.getUrl()}" target="_blank">${transaction.hash}</a>`),transaction.validate().then(()=>{resolve(solana.getConnectedAddress())}).catch(solana.errorCatch)}).catch(solana.errorCatch)))):errorPopup(Tokenico.lang.youDidNotBuyToken)}).catch(solana.errorCatch)}}),window.TokenicoProviders.solana=solana}function infoPopup(message,html=null){return Swal.fire({title:message,html:html,icon:"info",didOpen:()=>{Swal.hideLoading()}})}function errorPopup(message,html=null){return Swal.fire({title:message,html:html,icon:"error",didOpen:()=>{Swal.hideLoading()}})}function successPopup(message,html=null){Swal.fire({title:message,html:html,icon:"success",didOpen:()=>{Swal.hideLoading()}})}function waitingPopup(title,html=null){Swal.fire({title:title,html:html,allowOutsideClick:!1,didOpen:()=>{Swal.showLoading()}})}function closePopup(){Swal.close()}if(Tokenico.providers=TokenicoProviders,Tokenico.isMobile=()=>{return a=navigator.userAgent||navigator.vendor||window.opera,!(!/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a)&&!/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4)));var a},Tokenico.isWebview=()=>{var standalone,navigator,safari;return"undefined"!=typeof window&&(navigator=window.navigator,!!window.WebViewJavascriptBridge||!(!window.webkit||!window.webkit.messageHandlers)||!!navigator.userAgent.match(/WebView/i)||(standalone=navigator.standalone,navigator=navigator.userAgent.toLowerCase(),safari=/safari/.test(navigator),/iphone|ipod|ipad/.test(navigator)?!standalone&&!safari:navigator.includes("wv")))},Tokenico.walletClickedHelper=wallet=>{if(wallet.adapter?.isDetected&&!1===wallet.adapter?.isDetected())return Tokenico.isMobile()?wallet.adapter.supports.includes("mobile")?wallet.adapter?.deepLink?(infoPopup(Tokenico.lang.openInAppMsg),deepLink.adapter.deepLink.replace("{siteUrl}",window.location.origin)):infoPopup(Tokenico.lang.openInAppManualMsg):infoPopup(Tokenico.lang.onlyDesktopMsg):wallet.adapter?.download?(window.open(wallet.adapter?.download,"_blank"),infoPopup(Tokenico.lang.downloadMsg)):infoPopup(Tokenico.lang.downloadManualMsg);Tokenico.walletClicked(wallet)},Tokenico.walletTemplate=wallet=>{var image=Tokenico.walletImages[wallet.getKey()];const statuses={undefined:"<span></span>",detected:`<span class="detected">${Tokenico.lang.detected}</span>`,download:`<span class="download">${Tokenico.lang.download}</span>`,onlyDesktop:`<span class="onlyDesktop">${Tokenico.lang.onlyDesktop}</span>`,openInApp:`<span class="openInApp">${Tokenico.lang.openInApp}</span>`,openInAppManual:`<span class="openInAppManual">${Tokenico.lang.openInAppManual}</span>`};return`
            <li data-key="${wallet.getKey()}" onclick="Tokenico.walletClickedHelper(Tokenico.currentWallets['${wallet.getKey()}'])">
                <img class="icon" src="${image}" alt="${wallet.getKey()}">
                <span class="name">${wallet.getName()}</span>
                <span class="status">
                    ${void 0===wallet.isDetected()?statuses.undefined:!0===wallet.isDetected()?statuses.detected:Tokenico.isMobile()||!1!==wallet.isDetected()?Tokenico.isMobile()&&!wallet.getSupports().includes("mobile")?statuses.onlyDesktop:Tokenico.isMobile()&&wallet.getDeepLink()?statuses.openInApp:Tokenico.isMobile()&&!wallet.getDeepLink()?statuses.openInAppManual:void 0:statuses.download}
                </span>
            </li>
        `},Tokenico.openWalletModal=()=>{$(".tico-wallet-modal").show()},Tokenico.closeWalletModal=()=>{$(".tico-wallet-modal").hide()},$(window).on("click",function(e){$(e.target).hasClass("tico-wallet-modal")&&Tokenico.closeWalletModal()}),Tokenico.setWallets=wallets=>{Tokenico.currentWallets=wallets;const list=$(".tico-wallet-modal-content-wallets");list.html(""),wallets=Object.keys(wallets).sort(function(a,b){var order={true:1,undefined:2,false:3},a=wallets[a].isDetected(),b=wallets[b].isDetected();return order[a]-order[b]}).reduce((sortedObj,key)=>(sortedObj[key]=wallets[key],sortedObj),{}),Tokenico.isWebview()&&Object.values(wallets).forEach(wallet=>{if(wallet.isDetected())return(wallets={})[wallet.getKey()]=wallet,!0}),Object.values(wallets).forEach(wallet=>{list.append(Tokenico.walletTemplate(wallet))}),Tokenico.openWalletModal()},$(document).on("click",".copy-token-address",function(){var text=$(this).attr("data-address"),aux=document.createElement("input");aux.setAttribute("value",text),document.body.appendChild(aux),aux.select(),document.execCommand("copy"),document.body.removeChild(aux),successPopup(Tokenico.lang.successCopy)}),Tokenico?.presales){setTimeout(()=>{$(".process-area").show(),$(".process-area-loading").hide()},2e3);const template=document.createElement("template");template.innerHTML=`
            <div class="t-footer">
                <span class="t-powered-by">
                    Powered by
                </span>
                <a href="https://wordpress.org/plugins/tokenico-cryptocurrency-token-launchpad-presale-ico-ido-airdrop/" target="_blank">TokenICO</a>
            </div>
            <style>
                .t-footer {
                    display: flex;
                    font-size: 14px;
                    padding-bottom: 0px;
                    justify-content: center;
                }
                .t-footer a {
                    font-weight: 600;
                    color: #7F7F7F;
                    text-decoration: none;
                }
                .t-footer .t-powered-by {
                    color: #7F7F7F;
                    font-weight: 400;
                    margin-right: 5px;
                }
            </style>
        `;class PoweredBy extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(template.content.cloneNode(!0))}}function saveSaleTransaction(data){new Promise((resolve,reject)=>{$.ajax({method:"POST",url:Tokenico.apiUrl+"/save-sale-transaction",data:data,success(res){var presaleKey;presaleKey=data.presaleKey,res=res.message,$("[data-presale-key='"+presaleKey+"']").html(res),$(".start-countdown").each(function(index,item){Tokenico.countdown($(item))}),$(".end-countdown").each(function(index,item){Tokenico.countdown($(item))}),setTimeout(()=>{$(".process-area").show(),$(".process-area-loading").hide()},2e3),resolve(!0)},error(error){console.error(error),reject(!1)},complete(){resolve(!0)}})})}function findPresaleByKey(presaleKey){return Object.values(Tokenico.presales).find(p=>p.key==presaleKey)}function calculateAmount(amount,operation,presaleKey){presaleKey=findPresaleByKey(presaleKey),presaleKey=parseInt(presaleKey.exchangeRate);return"*"==operation?parseFloat(amount*presaleKey):parseFloat(amount/presaleKey)}function getProvider(network,presaleKey=null){return Tokenico.providers[network.code].initialize(network,presaleKey)}window.customElements.get("t-powered-by")||window.customElements.define("t-powered-by",PoweredBy),document.querySelector("t-powered-by")?setInterval(()=>{$("t-powered-by").show()},1e3):$(".presale-content").closest(".presale-col").append(document.createElement("t-powered-by")),$(document).on("keyup","#coinAmount",function(){var presaleKey=$(this).closest(".presale-content").attr("data-presale-key");$(this).closest(".presale-content").find("#tokenAmount").val(calculateAmount($(this).val(),"*",presaleKey))}),$(document).on("keyup","#tokenAmount",function(){var presaleKey=$(this).closest(".presale-content").attr("data-presale-key");$(this).closest(".presale-content").find("#coinAmount").val(calculateAmount($(this).val(),"/",presaleKey))}),$(document).on("click",".t-buy-now",async function(e){const presaleKey=$(this).attr("data-presale-key"),presale=findPresaleByKey(presaleKey);if(0==Tokenico.wcProjectId.length||!Tokenico.wcProjectId)return errorPopup(Tokenico.lang.wcProjectIdError);var coinAmountEl=$(this).closest(".presale-content").find("#coinAmount"),tokenAmountEl=$(this).closest(".presale-content").find("#tokenAmount");let coinAmount=parseFloat(coinAmountEl.val()),tokenAmount=parseFloat(tokenAmountEl.val());var minContribution=parseFloat(presale.minContribution),maxContribution=parseFloat(presale.maxContribution),maxAmount=calculateAmount(maxContribution,"*",presaleKey),minAmount=calculateAmount(minContribution,"*",presaleKey);let maxMsg=Tokenico.lang.maxContribution.replace("{max}",maxContribution),minMsg=Tokenico.lang.minContribution.replace("{min}",minContribution);return maxMsg=maxMsg.replace("{tokenSymbol}",presale.network.nativeCurrency.symbol),minMsg=minMsg.replace("{tokenSymbol}",presale.network.nativeCurrency.symbol),coinAmount?coinAmount<0?infoPopup(Tokenico.lang.paymentAmount):coinAmount>maxContribution?(coinAmountEl.val(maxContribution),tokenAmountEl.val(maxAmount),infoPopup(maxMsg)):coinAmount<minContribution?(coinAmountEl.val(minContribution),tokenAmountEl.val(minAmount),infoPopup(minMsg)):(waitingPopup(Tokenico.lang.pleaseWait),Boolean(presale.network.rpcUrl)?"not-started"==(maxAmount=await(maxContribution=getProvider(presale.network,presaleKey)).getPresaleStatus(presale))?infoPopup(Tokenico.lang.presaleNotStarted):"ended"==maxAmount?infoPopup(Tokenico.lang.presaleEnded):void maxContribution.buy(presaleKey,coinAmount,result=>{saveSaleTransaction({presaleKey:presaleKey,purchaseAmount:coinAmount,quantityPurchased:tokenAmount,token:presale.token,presaleId:presale.id,network:presale.network,sent:presale.instantTransfer,transactionHash:result.transactionHash,transactionUrl:result.transactionUrl,receiverAddress:result.receiverAddress,receiverAddressUrl:result.receiverAddressUrl})}).then(()=>{presale.instantTransfer?successPopup(Tokenico.lang.purchaseProcessSuccess):infoPopup(Tokenico.lang.purchaseProcessSuccess2)}):errorPopup(Tokenico.lang.pleaseEnterRpc)):infoPopup(Tokenico.lang.pleaseEnterAmount)}),$(document).on("click",".t-claim",async function(e){var presaleKey=$(this).attr("data-presale-key");const presale=findPresaleByKey(presaleKey);waitingPopup(Tokenico.lang.pleaseWait);var provider=getProvider(presale.network,presaleKey);if("ended"!=await provider.getPresaleStatus(presale))return infoPopup(Tokenico.lang.presaleNotEnded);provider.claim(presaleKey).then(async receiverAddress=>{$.ajax({method:"POST",url:Tokenico.apiUrl+"/claim-successful",data:{receiverAddress:receiverAddress,presaleId:presale.id},success(){successPopup(Tokenico.lang.claimSuccessful)},error(error){console.error(error),errorPopup(Tokenico.lang.unexpectedError)}})})})}})(jQuery);